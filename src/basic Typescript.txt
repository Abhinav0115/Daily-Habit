
//learn:

/*
      typeScript is a strict type checking - we must assign type of variable 

*/

//any type
let world: any; //not recommanded
let world2: unknown; //recommanded

//string
let name: string;

//number
let age: number;

//boolean
let istrue: boolean;

//array
let hobbies: string[];

//tuple
let role: [number, string];

//to assign two or more type to a variable  we use union(|)
let movie: number | string;

//object
type Person = {
    name: string /* madatory */;
    age: number /* madatory */;
    mobileNumber?: number /* optional */;
};

//use of person object
let person: Person = {
    name: "abhi",
    age: 5,
};

//array of person object
let lotsOfPeople: Person[];

//function
function printName(name: string) {
    console.log(name);
}
printName("alpha");

//function-2
let PrintAge: (name: string) => void; //return undefined
let PrintAge2: (name: string) => never; //doesn't return anything

//object - type
type X = {
    a: string;
    b: number;
};

type Y = X & {
    c: string;
    d: number;
};

let y: Y = {
    c: "asss",
    d: 12,
    a: "qw",
    b: 44,
};

// object - interface
interface A {
    d: string;
    s?: number;
}

interface B extends A {
    f: string;
    g: number;
}

// object -> type & interface

type Z = B & {
    c: string;
    d: number;
};

// object -> interface extends type
interface C extends X {
    f: string;
    g: number;
}